<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Colorful Responsive Task Manager</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
      color: #2d2d2d;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      user-select: none;
    }
    .app-container {
      background: white;
      width: 100%;
      max-width: 500px;
      border-radius: 18px;
      box-shadow: 0 20px 50px rgba(0,0,0,0.15);
      padding: 2rem;
      display: flex;
      flex-direction: column;
      height: 90vh;
      max-height: 700px;
      overflow: hidden;
    }
    header {
      text-align: center;
      margin-bottom: 2rem;
      user-select: text;
    }
    header h1 {
      margin: 0;
      font-weight: 600;
      font-size: 2.8rem;
      background: linear-gradient(45deg, #ff512f, #dd2476);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      letter-spacing: 1.5px;
    }
    .input-row {
      display: flex;
      margin-bottom: 1.5rem;
      gap: 0.5rem;
    }
    input[type="text"] {
      flex: 1;
      padding: 0.8rem 1rem;
      border-radius: 50px 0 0 50px;
      border: 2px solid #dd2476;
      font-size: 1.1rem;
      font-weight: 400;
      transition: all 0.3s ease;
      box-shadow: inset 0 2px 4px rgba(221,36,118,0.3);
      color: #333;
    }
    input[type="text"]::placeholder {
      color: #dd2476;
      font-weight: 300;
    }
    input[type="text"]:focus {
      outline: none;
      border-color: #ff512f;
      box-shadow: 0 0 8px #ff512f;
      background: #fff0f3;
    }
    button.add-btn {
      background: linear-gradient(45deg, #ff512f, #dd2476);
      border: none;
      border-radius: 0 50px 50px 0;
      padding: 0 1.8rem;
      font-weight: 600;
      font-size: 1.1rem;
      color: white;
      cursor: pointer;
      box-shadow: 0 6px 15px rgba(221,36,118,0.5);
      display: flex;
      align-items: center;
      gap: 0.6rem;
      transition: background 0.4s ease, box-shadow 0.4s ease;
      user-select: none;
    }
    button.add-btn:hover:not(:disabled) {
      background: linear-gradient(45deg, #dd2476, #ff512f);
      box-shadow: 0 8px 20px rgba(255,81,47,0.7);
    }
    button.add-btn:disabled {
      background: #f0a6bb;
      cursor: not-allowed;
      box-shadow: none;
    }
    .loading-indicator {
      display: inline-block;
      width: 18px;
      height: 18px;
      border: 3px solid white;
      border-top: 3px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg);}
      100% { transform: rotate(360deg);}
    }
    .task-list {
      flex-grow: 1;
      overflow-y: auto;
      padding-right: 5px;
      border-radius: 12px;
      background: #fff5f8;
      box-shadow: inset 0 0 12px rgba(255,81,47,0.15);
      scrollbar-width: thin;
      scrollbar-color: #ff512f #ffeadf;
    }
    .task-list::-webkit-scrollbar {
      width: 8px;
    }
    .task-list::-webkit-scrollbar-thumb {
      background: #ff512f;
      border-radius: 20px;
    }
    .task-list::-webkit-scrollbar-track {
      background: #ffeadf;
      border-radius: 20px;
    }
    .task-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.7rem 1rem;
      border-bottom: 1px solid #ffdad3;
      transition: background 0.3s ease;
      cursor: default;
      user-select: none;
    }
    .task-item:hover {
      background: #ffe7ea;
    }
    label {
      cursor: pointer;
      flex-grow: 1;
      display: flex;
      align-items: center;
      gap: 1rem;
      user-select: none;
      font-weight: 500;
      font-size: 1.1rem;
      color: #422057;
      transition: color 0.3s ease;
    }
    input[type="checkbox"] {
      accent-color: #dd2476;
      width: 20px;
      height: 20px;
      cursor: pointer;
      flex-shrink: 0;
      user-select: none;
    }
    .task-text.done {
      color: #a47fb4;
      text-decoration: line-through;
      font-weight: 400;
    }
    button.delete-btn {
      background: transparent;
      border: none;
      font-size: 1.6rem;
      color: #ff512f;
      cursor: pointer;
      padding: 0 0.4rem;
      user-select: none;
      transition: color 0.3s ease;
    }
    button.delete-btn:hover {
      color: #dd2476;
    }
    .footer {
      margin-top: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-weight: 600;
      font-size: 1rem;
      color: #422057;
      user-select: none;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .footer button {
      background: #dd2476;
      border: none;
      border-radius: 25px;
      padding: 0.5rem 1.4rem;
      color: white;
      font-weight: 600;
      cursor: pointer;
      box-shadow: 0 5px 15px rgba(221,36,118,0.45);
      transition: background 0.4s ease, box-shadow 0.4s ease;
      user-select: none;
    }
    .footer button:hover:not(:disabled) {
      background: #ff512f;
      box-shadow: 0 7px 20px rgba(255,81,47,0.7);
    }
    .footer button:disabled {
      background: #f0a6bb;
      cursor: not-allowed;
      box-shadow: none;
    }
    .error-msg {
      color: #dd2476;
      font-weight: 700;
      margin-bottom: 1rem;
      user-select: text;
      text-align: center;
    }
    @media (max-width: 480px) {
      body {
        padding: 1rem 0.5rem;
      }
      .app-container {
        max-width: 100%;
        height: 95vh;
        padding: 1.5rem 1rem;
      }
      header h1 {
        font-size: 2rem;
      }
      input[type="text"] {
        font-size: 1rem;
      }
      button.add-btn {
        font-size: 1rem;
        padding: 0 1rem;
      }
      .task-item label {
        font-size: 1rem;
      }
      .footer {
        justify-content: center;
        gap: 0.5rem;
      }
    }
  </style>
</head>
a<body>
  <main class="app-container" role="main" aria-label="Colorful Task Manager Application">
    <header>
      <h1>Task Manager</h1>
    </header>

    <div id="errorMsg" class="error-msg" role="alert" aria-live="assertive" style="display:none;"></div>

    <div class="input-row">
      <input
        id="taskInput"
        type="text"
        aria-label="Task description"
        placeholder="What do you want to do today?"
        autocomplete="off"
        spellcheck="false"
      />
      <button id="addBtn" class="add-btn" aria-label="Add task">
        Add
      </button>
    </div>

    <section id="taskList" class="task-list" aria-live="polite" aria-relevant="additions removals">
      <p style="color:#422057; font-weight:600; text-align:center; margin-top: 1rem;">No tasks yet, add some! ✨</p>
    </section>

    <footer class="footer">
      <div id="taskCount" aria-live="polite" aria-atomic="true">Tasks: 0</div>
      <div>
        <button id="undoBtn" disabled aria-disabled="true" aria-label="Undo last action">Undo</button>
        <button id="redoBtn" disabled aria-disabled="true" aria-label="Redo last undone action">Redo</button>
      </div>
    </footer>
  </main>

  <script>
    (() => {
      const taskInput = document.getElementById("taskInput");
      const addBtn = document.getElementById("addBtn");
      const taskList = document.getElementById("taskList");
      const errorMsg = document.getElementById("errorMsg");
      const undoBtn = document.getElementById("undoBtn");
      const redoBtn = document.getElementById("redoBtn");
      const taskCount = document.getElementById("taskCount");

      let tasks = [];
      let history = [];
      let redoStack = [];

      let loading = false;

      // Helper: render tasks list
      function renderTasks() {
        taskList.innerHTML = "";
        if (tasks.length === 0) {
          taskList.innerHTML = '<p style="color:#422057; font-weight:600; text-align:center; margin-top: 1rem;">No tasks yet, add some! ✨</p>';
        } else {
          tasks.forEach(task => {
            const div = document.createElement("div");
            div.className = "task-item";

            const label = document.createElement("label");
            label.htmlFor = "chk_" + task.id;

            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.id = "chk_" + task.id;
            checkbox.checked = task.done;
            checkbox.setAttribute("aria-checked", task.done);
            checkbox.addEventListener("change", () => toggleDone(task.id));

            const span = document.createElement("span");
            span.className = "task-text" + (task.done ? " done" : "");
            span.textContent = task.text;

            label.appendChild(checkbox);
            label.appendChild(span);

            const delBtn = document.createElement("button");
            delBtn.className = "delete-btn";
            delBtn.setAttribute("aria-label", "Delete task: " + task.text);
            delBtn.textContent = "×";
            delBtn.addEventListener("click", () => deleteTask(task.id));

            div.appendChild(label);
            div.appendChild(delBtn);
            taskList.appendChild(div);
          });
        }
        taskCount.textContent = `Tasks: ${tasks.length}`;
      }

      // Save history for undo
      function saveHistory() {
        history.push(JSON.parse(JSON.stringify(tasks)));
        if (history.length > 50) history.shift(); // limit history size
      }

      // Add task with simulated loading
      function addTask() {
        if (loading) return;

        const text = taskInput.value.trim();
        if (text === "") {
          showError("Task cannot be empty.");
          return;
        }
        hideError();

        loading = true;
        addBtn.disabled = true;
        addBtn.textContent = "Adding ";

        const spinner = document.createElement("span");
        spinner.className = "loading-indicator";
        addBtn.appendChild(spinner);

        setTimeout(() => {
          saveHistory();
          tasks.push({ id: Date.now(), text, done: false });
          taskInput.value = "";
          loading = false;
          addBtn.disabled = false;
          addBtn.textContent = "Add";
          redoStack = [];
          updateUndoRedo();
          renderTasks();
          taskInput.focus();
        }, 700);
      }

      // Toggle task done/undone
      function toggleDone(id) {
        saveHistory();
        redoStack = [];
        tasks = tasks.map(t => t.id === id ? { ...t, done: !t.done } : t);
        updateUndoRedo();
        renderTasks();
      }

      // Delete task
      function deleteTask(id) {
        saveHistory();
        redoStack = [];
        tasks = tasks.filter(t => t.id !== id);
        updateUndoRedo();
        renderTasks();
      }

      // Undo
      function undo() {
        if (history.length === 0) return;
        redoStack.unshift(JSON.parse(JSON.stringify(tasks)));
        tasks = history.pop();
        updateUndoRedo();
        renderTasks();
      }

      // Redo
      function redo() {
        if (redoStack.length === 0) return;
        history.push(JSON.parse(JSON.stringify(tasks)));
        tasks = redoStack.shift();
        updateUndoRedo();
        renderTasks();
      }

      // Show error
      function showError(msg) {
        errorMsg.style.display = "block";
        errorMsg.textContent = msg;
      }

      // Hide error
      function hideError() {
        errorMsg.style.display = "none";
        errorMsg.textContent = "";
      }

      // Update undo/redo button states
      function updateUndoRedo() {
        undoBtn.disabled = history.length === 0;
        undoBtn.setAttribute("aria-disabled", undoBtn.disabled);
        redoBtn.disabled = redoStack.length === 0;
        redoBtn.setAttribute("aria-disabled", redoBtn.disabled);
      }

      // Event listeners
      addBtn.addEventListener("click", addTask);
      undoBtn.addEventListener("click", undo);
      redoBtn.addEventListener("click", redo);

      taskInput.addEventListener("keydown", e => {
        if (e.key === "Enter") addTask();
      });

      // Initial render
      renderTasks();
      updateUndoRedo();
    })();
  </script>
</body>
</html>
